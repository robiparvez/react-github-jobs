{"version":3,"sources":["hooks/useFetchJobs.js","components/Job.js","components/SearchForm.js","App.js","index.js"],"names":["BASE_URL","ACTIONS","reducer","state","action","type","loading","jobs","payload","error","hasNextPage","useFetchJobs","params","page","useReducer","dispatch","useEffect","cancelToken1","axios","CancelToken","source","get","cancelToken","token","then","res","console","log","data","catch","err","isCancel","cancelToken2","length","cancel","Job","job","title","company_name","publication_date","job_type","candidate_required_location","description","useState","open","setOpen","Card","className","Body","Title","Subtitle","Date","toLocaleDateString","toLocaleTimeString","Badge","variant","str","i","frags","split","charAt","toUpperCase","slice","join","removeUnderScoreAndConvertToCamelCase","Text","Button","onClick","Collapse","in","parse","SearchForm","onParamChange","Form","Row","Group","as","Col","Label","Control","name","onChange","value","search","category","App","setParams","setPage","Container","e","param","target","prevParams","map","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a037db7.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { useReducer, useEffect } from 'react';\r\n\r\n// const BASE_URL = 'https://remotive.io/api/remote-jobs';\r\nconst BASE_URL = 'https://remotive.io/api/remote-jobs?limit=200';\r\n\r\nconst ACTIONS = {\r\n    MAKE_REQUEST: 'make-request',\r\n    GET_DATA: 'get-data',\r\n    ERROR: 'error',\r\n    UPDATE_HAS_NEXT_PAGE: 'update-has-next-page'\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case ACTIONS.MAKE_REQUEST:\r\n            return { loading: true, jobs: [] };\r\n\r\n        case ACTIONS.GET_DATA:\r\n            return { ...state, loading: false, jobs: action.payload.jobs };\r\n\r\n        case ACTIONS.ERROR:\r\n            return { ...state, loading: false, error: action.payload.error, jobs: [] };\r\n\r\n        case ACTIONS.UPDATE_HAS_NEXT_PAGE:\r\n            return { ...state, hasNextPage: action.payload.hasNextPage };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst useFetchJobs = (params, page) => {\r\n    const [state, dispatch] = useReducer(reducer, { jobs: [], loading: true });\r\n\r\n    useEffect(() => {\r\n        dispatch({ type: ACTIONS.MAKE_REQUEST });\r\n\r\n        // Fetch jobs\r\n        const cancelToken1 = axios.CancelToken.source();\r\n        axios\r\n            .get(BASE_URL, {\r\n                cancelToken: cancelToken1.token,\r\n                // params: { markdown: true, page: page, ...params }\r\n                params: { ...params }\r\n            })\r\n            .then((res) => {\r\n                console.log(res.data.jobs);\r\n                // dispatch({ type: ACTIONS.GET_DATA, payload: { jobs: res.data } });\r\n                dispatch({ type: ACTIONS.GET_DATA, payload: { jobs: res.data.jobs } });\r\n            })\r\n            .catch((err) => {\r\n                // console.log(err);\r\n                if (axios.isCancel(err)) return;\r\n                dispatch({ type: ACTIONS.ERROR, payload: { error: err } });\r\n            });\r\n\r\n        // Fetch jobs pages length\r\n        const cancelToken2 = axios.CancelToken.source();\r\n        axios\r\n            .get(BASE_URL, {\r\n                cancelToken: cancelToken2.token,\r\n                // params: { markdown: true, page: page, ...params }\r\n                params: { ...params }\r\n            })\r\n            .then((res) => {\r\n                // dispatch({ type: ACTIONS.UPDATE_HAS_NEXT_PAGE, payload: { hasNextPage: res.data.length !== 0 } });\r\n                dispatch({ type: ACTIONS.UPDATE_HAS_NEXT_PAGE, payload: { hasNextPage: res.data.jobs.length !== 0 } });\r\n            })\r\n            .catch((err) => {\r\n                if (axios.isCancel(err)) return;\r\n                dispatch({ type: ACTIONS.ERROR, payload: { error: err } });\r\n            });\r\n\r\n        return () => {\r\n            cancelToken1.cancel();\r\n            cancelToken2.cancel();\r\n        };\r\n    }, [params, page]);\r\n\r\n    return state;\r\n};\r\n\r\nexport default useFetchJobs;\r\n","import { useState } from 'react';\r\nimport { Badge, Button, Card, Collapse } from 'react-bootstrap';\r\nimport parse from 'html-react-parser';\r\n\r\nconst Job = ({ job: { title, company_name, publication_date, job_type, candidate_required_location, description } }) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen((state) => !state);\r\n    };\r\n\r\n    const removeUnderScoreAndConvertToCamelCase = (str) => {\r\n        var i,\r\n            frags = str.split('_');\r\n        for (i = 0; i < frags.length; i++) {\r\n            frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);\r\n        }\r\n        return frags.join(' ');\r\n    };\r\n\r\n    return (\r\n        <Card className='mb-3'>\r\n            <Card.Body>\r\n                <div className='d-flex justify-content-between mb-3'>\r\n                    <div>\r\n                        <Card.Title>\r\n                            {title} - <span className='text-muted'>{company_name}</span>\r\n                        </Card.Title>\r\n\r\n                        <Card.Subtitle className='text-muted mb-2'>\r\n                            {new Date(publication_date).toLocaleDateString()} {new Date(publication_date).toLocaleTimeString()}\r\n                        </Card.Subtitle>\r\n\r\n                        <Badge variant='secondary mr-2'>{removeUnderScoreAndConvertToCamelCase(job_type)}</Badge>\r\n\r\n                        <Badge variant='secondary'>{candidate_required_location}</Badge>\r\n                    </div>\r\n                </div>\r\n\r\n                <Card.Text>\r\n                    <Button onClick={handleOpen} variant='primary'>\r\n                        {!open ? 'View Details' : 'Hide Details'}\r\n                    </Button>\r\n                </Card.Text>\r\n\r\n                <Collapse in={open}>\r\n                    <div>{parse(description)}</div>\r\n                </Collapse>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Job;\r\n","import { Col, Form } from 'react-bootstrap';\r\n\r\nconst SearchForm = ({ params, onParamChange }) => {\r\n    return (\r\n        <Form className='mb-4'>\r\n            <Form.Row className='align-items-end'>\r\n\r\n                {/* Title/Description */}\r\n                <Form.Group as={Col}>\r\n                    <Form.Label>Title/Description</Form.Label>\r\n                    <Form.Control type='text' name='search' onChange={onParamChange} value={params.search} />\r\n                </Form.Group>\r\n\r\n                {/* Category */}\r\n                <Form.Group as={Col}>\r\n                    <Form.Label>Category</Form.Label>\r\n                    <Form.Control type='text' name='category' onChange={onParamChange} value={params.category} />\r\n                </Form.Group>\r\n\r\n                {/* Company */}\r\n                <Form.Group as={Col}>\r\n                    <Form.Label>Company</Form.Label>\r\n                    <Form.Control type='text' name='company_name' onChange={onParamChange} value={params.company_name} />\r\n                </Form.Group>\r\n\r\n                {/* Full-time */}\r\n                {/* <Form.Group as={Col} xs='auto'>\r\n                    <Form.Check\r\n                    onChange={onParamChange}\r\n                    value={params.full_time}\r\n                    name='full_time'\r\n                    id='full-time'\r\n                    label='Only Full Time'\r\n                    type='switch'\r\n                    className='mb-2'\r\n                    />\r\n                </Form.Group> */}\r\n            </Form.Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default SearchForm;\r\n","import { useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport useFetchJobs from './hooks/useFetchJobs';\nimport Job from './components/Job';\n// import JobsPagination from './components/JobsPagination';\nimport SearchForm from './components/SearchForm';\n\nfunction App() {\n    const title = 'REMOTIVE JOBS';\n    const [params, setParams] = useState({});\n    const [page, setPage] = useState(1);\n    const { jobs, loading, error, hasNextPage } = useFetchJobs(params, page);\n    const handleParamsChange = (e) => {\n        const param = e.target.name;\n        const value = e.target.value;\n        setPage(1);\n        setParams((prevParams) => ({ ...prevParams, [param]: value }));\n    };\n\n    return (\n        <Container className='my-4'>\n            <h1 className='mb-4'>{title}</h1>\n\n            {/* Search form */}\n            <SearchForm params={params} onParamChange={handleParamsChange} />\n\n            {/* Pagination - Top */}\n            {/* <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage} /> */}\n\n            {loading && <h1>Loading...</h1>}\n\n            {error && <h1>Try refreshing...</h1>}\n            {jobs.map((job) => {\n                return <Job key={job.id} job={job} />;\n            })}\n\n            {/* Pagination - Bottom */}\n            {/* <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage} /> */}\n        </Container>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <>\n        <App />\n    </>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}